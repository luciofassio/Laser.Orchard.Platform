@using Orchard.Localization.Services;
@using Laser.Orchard.CulturePicker.Services;
@using Orchard.Environment.Configuration;
@{
    var Menu = Model.Menu;
    var items = (IList<dynamic>)Enumerable.Cast<dynamic>(Menu.Items);

    int position = 0;
    var linkHome = items[0].Href;
}
<nav id="navFixed" class="navbar navbar-default navbar-fixed-top" role="navigation">
    <div id="header-top" class="container"></div>
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a href="@linkHome" title="Laser Informatica" rel="home" id="logo">&nbsp;</a>
        </div>
        <div class="navbar-collapse collapse">
            <div class="menu-menu-principale-container">
                <ul id="main-menu" class="nav navbar-nav handel-got-d">
                    @foreach (var item in items) {
                        if (position > 0) {
                            bool hasChildren = (item.Item.Items.Length > 0);
                            <li class="menu-item menu-item-type-post_type menu-item-object-page @(((bool)item.Selected) ? "current-page-ancestor active" : "") @((hasChildren) ? "menu-item-has-children dropdown" : "")">
                                @if (hasChildren) {
                                    <a href="@item.Href" class="dropdown-toggle" data-toggle="dropdown">@item.Text<b class="caret"></b></a>
                                    <ul class="dropdown-menu">
                                        @DisplayChildren(item)
                                    </ul>
                                }
                                else {
                                    <a href="@item.Href">@item.Text</a>
                                }
                            </li>
                        }
                        position = position + 1;
                    }
                </ul>
                @*Threating Culturepicker as embedded functionality and not as a widget*@
                @{
                    ICultureManager _cultureManager;
                    ICulturePickerSettingsService _extendedCultureService;
                    ILocalizableContentService _localizableContentService;
                    WorkContext.TryResolve(out _cultureManager);
                    WorkContext.TryResolve(out _extendedCultureService);
                    WorkContext.TryResolve(out _localizableContentService);
                    var settings = _extendedCultureService.ReadSettings();
                    var baseUrl = WorkContext.CurrentSite.BaseUrl;
                    var availableCultures = settings.ExtendedCulturesList;
                    var showOnlyPertinentCultures = settings.Settings.ShowOnlyPertinentCultures;
                    var showLabel = settings.Settings.ShowLabel;
                    var cleanUrl = string.IsNullOrWhiteSpace(baseUrl) ? "" : WorkContext.HttpContext.Request.Url.AbsoluteUri.Replace(baseUrl, "");
                    cleanUrl = WorkContext.HttpContext.Server.UrlDecode(cleanUrl);
                    cleanUrl = cleanUrl.StartsWith("/") ? cleanUrl.Substring(1) : cleanUrl;

                    var urlPrefix = WorkContext.Resolve<ShellSettings>().RequestUrlPrefix;
                    if (!String.IsNullOrWhiteSpace(urlPrefix)) {
                        cleanUrl = cleanUrl.StartsWith(urlPrefix, StringComparison.OrdinalIgnoreCase) ? cleanUrl.Substring(urlPrefix.Length) : cleanUrl;
                    }
                    cleanUrl = HttpUtility.UrlDecode(cleanUrl);
                    cleanUrl = cleanUrl.StartsWith("/") ? cleanUrl.Substring(1) : cleanUrl;
                    var isHomePage = String.IsNullOrWhiteSpace(cleanUrl);

                    var siteAvailableCultures = _cultureManager.ListCultures().AsQueryable();
                    var userCulture = _extendedCultureService.GetExtendedCulture(_cultureManager.GetCurrentCulture(WorkContext.HttpContext));
                    var translatedCultures = _localizableContentService.AvailableTranslations(cleanUrl, isHomePage);

                }
                @Display(New.Parts_CulturePicker(AvailableCultures: availableCultures,
                       TranslatedCultures: translatedCultures,
                       UserCulture: userCulture,
                       ShowOnlyPertinentCultures: showOnlyPertinentCultures,
                       ShowLabel: showLabel
                       ))
            </div>
        </div>
    </div>
</nav>
