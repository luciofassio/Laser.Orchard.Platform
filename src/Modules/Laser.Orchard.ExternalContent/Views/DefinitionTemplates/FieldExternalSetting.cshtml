@using System.Web.Mvc.Html
@using Orchard.Mvc.Html
@model Laser.Orchard.ExternalContent.Settings.FieldExternalSetting
<fieldset>
    @Html.CheckBoxFor(m => m.Required)
    <label class="forcheckbox" for="@Html.FieldIdFor(m => m.Required)">@T("Required")</label>
    <span class="hint">@T("If checked, the field will be mandatory.")</span>
</fieldset>
<fieldset>
    @Html.CheckBoxFor(m => m.NoFollow)
    <label class="forcheckbox" for="@Html.FieldIdFor(m => m.NoFollow)">@T("No Follow")</label>
    <span class="hint">@T("If not checked, the linked content will be charged with contentitem.")</span>
</fieldset>
<fieldset>
    @Html.CheckBoxFor(m => m.GenerateL)
    <label class="forcheckbox" for="@Html.FieldIdFor(m => m.GenerateL)">@T("Generate on L For Mobile")</label>
    <span class="hint">@T("Used only on mobile communication. If checked, the linked content will be put in l field")</span>
</fieldset>
<fieldset>
    <legend>@T("Certificate informations")</legend>
    <div class='row'>
        <div class='col-sm-4'>
            <div class='form-group'>
                @Html.CheckBoxFor(m => m.CertificateRequired)
                @Html.LabelFor(m => m.CertificateRequired, T("Attach certificate to request").Text, new { @class = "forcheckbox" })
                <span class="hint">@T("If checked, a certificate will be attached to the request.")</span>
            </div>
        </div>
        <div class='col-sm-4'>
            <div class='form-group'>
                @Html.LabelFor(m => m.CerticateFileName, T("Certificate file name."))
                @Html.TextBoxFor(m => m.CerticateFileName, new { @class = "text medium" })
                <span class="hint">@T("The certificate file name. You also have to FTP upload the certificate in folder /App_Data/Sites/[tenant]/externalfields/ ")</span>
            </div>
        </div>
        <div class='col-sm-4'>
            <div class='form-group'>
                @Html.LabelFor(m => m.CertificatePrivateKey, T("Private key."))
                @Html.TextBoxFor(m => m.CertificatePrivateKey, new { Value = "", @class = "text medium" })

                @if (!String.IsNullOrEmpty(Model.CertificatePrivateKey)) {
                    <span class="hint">@T("The certificate private key. Insert (none) if no key is required. A private key has already been set, leave empty to keep it unchanged.")</span>
                }
                else {
                    <span class="hint">@T("The certificate private key. The key is empty.")</span>
                }
            </div>
        </div>
    </div>
</fieldset>
<fieldset>
    <legend>@T("HTTP Request")</legend>
    <div>
        <label for="@Html.FieldIdFor(m => m.DataType)">@T("Data Type")</label>
        @Html.DropDownListFor(m => m.DataType, new SelectList(Enum.GetValues(typeof(Laser.Orchard.ExternalContent.OriginData)), Model.DataType), new { @class = "text" })
        <span class="hint">@T("Default is RestWebService")</span>
    </div><div>
        <label for="@Html.FieldIdFor(m => m.ExternalURL)">@T("External URL / executable string")</label>
        @Html.TextBoxFor(m => m.ExternalURL, new { @class = "text large tokenized" })
        <span class="hint">@T("Insert url and token or executable (see Data type)")</span>
        @Html.ValidationMessageFor(m => m.ExternalURL)
    </div><div>
        <label for="@Html.FieldIdFor(m => m.HttpVerb)">@T("Use this HttpVerb")</label>
        @Html.DropDownListFor(m => m.HttpVerb, new SelectList(Enum.GetValues(typeof(Laser.Orchard.ExternalContent.HttpVerbOptions)), Model.HttpVerb), new { @class = "text", onclick = "verbChanged(this)" })
        <span class="hint">@T("Default is GET")</span>
    </div>
    <div @if (Model.HttpVerb.ToString() != "POST") { <text> style="display:none" </text> }>
        <fieldset>
            <label for="@Html.FieldIdFor(m => m.HttpDataType)">@T("Use this content type")</label>
            @Html.DropDownListFor(m => m.HttpDataType, new SelectList(Enum.GetValues(typeof(Laser.Orchard.ExternalContent.HttpDataTypeOptions)), Model.HttpDataType), new { @class = "text" })
            <span class="hint">@T("Default is JSON")</span>
        </fieldset>
        <fieldset>
            <label for="@Html.FieldIdFor(m => m.BodyRequest)">@T("Body Request")</label>
            @Html.TextAreaFor(m => m.BodyRequest, new { @class = "text large tokenized" })
            <span class="hint">@T("Insert request body")</span>
        </fieldset>
        <script type="text/javascript">
            function verbChanged(e) {
                var aux = $("#" + e.id);
                if (aux.val() == "POST") {
                    aux.parent().next("div").show();
                }
                else {
                    aux.parent().next("div").hide();
                }
            }
        </script>
    </div><div>
        <label for="@Html.FieldIdFor(m => m.AdditionalHeadersText)">@T("Additional headers for web request")</label>
        @Html.TextAreaFor(m => m.AdditionalHeadersText, new { @class = "text large tokenized" })
        <span class="hint">@T("One header per line. Each header must have the form 'header_name: header_value'.")</span>
    </div>
</fieldset>
<fieldset>
    <legend>@T("Cache")</legend>
    <div>
        <label for="@Html.FieldIdFor(m => m.CacheMinute)">@T("Cache duration")</label>
        @Html.TextBoxFor(m => m.CacheMinute)
        <span class="hint">@T("Cache duration time in minutes")</span>
    </div>
    <div>
        @Html.CheckBoxFor(m => m.CacheToFileSystem)
        <label class="forcheckbox" for="@Html.FieldIdFor(m => m.CacheToFileSystem)">@T("Cache To FileSystem")</label>
        <span class="hint">@T("If checked cache will be stored also in filesystem (in folder/App_Data/cache).")</span>
    </div>
    <div>
        <label for="@Html.FieldIdFor(m => m.CacheInput)">@T("Input Cache Key")</label>
        @Html.TextBoxFor(m => m.CacheInput, new { @class = "text large tokenized" })
        <span class="hint">@T("The cache key used in input.")</span>
    </div>
    <div>
        <label for="@Html.FieldIdFor(m => m.ScheduledMinute)">@T("Scheduled Minute")</label>
        @Html.TextBoxFor(m => m.ScheduledMinute)
        <span class="hint">@T("Scheduled request Minute")</span>
    </div>
    <div>
        <label for="@Html.FieldIdFor(m => m.InternalHostNameForScheduledTask)">@T("Server hostname (internally resolved by the server)")</label>
        @Html.TextBoxFor(m => m.InternalHostNameForScheduledTask, new { @class="text large"})
        <span class="hint">@T("The hostname (internally resolved by the server) that the WebClient have to call to generate the cache (e.g. http://localhost or http://local.laser-group.com). If empty, the request will be addressed to the tenant base url.")</span>
    </div>
</fieldset>
@Display.TokenHint()



