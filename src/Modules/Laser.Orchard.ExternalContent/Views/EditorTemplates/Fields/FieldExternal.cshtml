@model Laser.Orchard.ExternalContent.ViewModels.FieldExternalVM
@using Orchard.Utility.Extensions;

@{
    Script.Require("jQuery").AtFoot();
    var name = Model.Field.Name;
    var required = ((bool?)Model.Setting.Required) ?? false;

    Int32 ScheduledMinute = Model.Setting.ScheduledMinute;
}
@if (String.IsNullOrEmpty(Model.Setting.ExternalURL))
{
<fieldset  data-required="@required.ToString().ToLower()">
        <label  @if (required)
                { <text>class="required"</text> } for="@Html.FieldIdFor(m => "FieldExternal-" + name)">@name.CamelFriendly()</label>
        @Html.TextBoxFor(m => m.Field.ExternalUrl, new { @class = "text large tokenized" })
         <span class="hint">@T("Insert url and token")</span>
     @if (ScheduledMinute > 0) {
    <br /> 
     @Html.Raw("&nbsp;")<button   type="submit" name="submit.Save" value="@Html.Raw("submit.StartSchedule" )">@T("Start Schedule")</button>
  }  
</fieldset>
        @Display.TokenHint()
<fieldset>
    <label for="@Html.FieldIdFor(m => m.Field.HttpVerb)">@T("Additional headers for web request")</label>
    @Html.TextAreaFor(m => m.Field.AdditionalHeadersText, new { @class = "text large tokenized" })
    <span class="hint">@T("One header per line. Each header must have the form 'header_name: header_value'.")</span>
</fieldset>
<fieldset>
    <label for="@Html.FieldIdFor(m => m.Field.HttpVerb)">@T("Use this HttpVerb")</label>
    @Html.DropDownListFor(m => m.Field.HttpVerbCode, new SelectList(Enum.GetValues(typeof(Laser.Orchard.ExternalContent.HttpVerbOptions)), Model.Field.HttpVerbCode), new { @class = "text", onchange = "verbChanged(this);" })
    <span class="hint">@T("Default is GET")</span>
</fieldset>

 
    
<div @if (Model.Field.HttpVerbCode != "POST") { <text> style="display:none" </text> } >
    <fieldset>
        <label for="@Html.FieldIdFor(m => m.Field.HttpDataType)">@T("Use this content type")</label>
        @Html.DropDownListFor(m => m.Field.HttpDataTypeCode, new SelectList(Enum.GetValues(typeof(Laser.Orchard.ExternalContent.HttpDataTypeOptions)), Model.Field.HttpDataTypeCode), new { @class = "text" })
        <span class="hint">@T("Default is JSON")</span>
    </fieldset>
    <fieldset>
        <label for="@Html.FieldIdFor(m => m.Field.BodyRequest)">@T("Body Request")</label>
        @Html.TextAreaFor(m => m.Field.BodyRequest, new { @class = "text large tokenized" })
        <span class="hint">@T("Insert request body")</span>
    </fieldset>
     @Display.TokenHint()
</div>
<script type="text/javascript">
    function verbChanged(e) {
        var aux = $("#" + e.id);
        if (aux.val() == "POST") {
            aux.parent().next("div").show();
        }
        else {
            aux.parent().next("div").hide();
        }
    }
</script>
}
