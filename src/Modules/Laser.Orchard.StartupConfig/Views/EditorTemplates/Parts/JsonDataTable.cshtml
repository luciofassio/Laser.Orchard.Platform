@model Laser.Orchard.StartupConfig.Models.JsonDataTablePart
@using Laser.Orchard.StartupConfig.Models;
@{
  Style.Require("tabulator").AtHead();
  Script.Require("tabulator").AtHead();

  var settings = Model.Settings.GetModel<JsonDataTablePartSettings>();
  var columns = settings.ColumnsDefinition;
  columns = "[{rowHandle:true,formatter:\"handle\",headerSort:false,width:30,minWidth:30}," + columns.TrimStart('[').TrimEnd(']') + ",{rowHandle:true,formatter:\"buttonCross\",headerSort:false,width:30,minWidth:30,cellClick:function(e, cell){cell.getRow().delete();}}]";
}
<fieldset>
  <legend></legend>
  <div>
    @Html.HiddenFor(m => m.TableData)
    <div class="btn-group" role="group" aria-label="Basic example" id="toolbar-@Model.Id">
      <button type="button" class="btn btn-secondary" id="btnAddTop" style="margin-right:10px" title="@T("Insert a row at the top of the list")">@T("Insert")</button>
      <button type="button" class="btn btn-secondary" id="btnAddBottom" style="margin-right:10px" title="@T("Insert a row at the bottom of the list")">@T("Add")</button>
    </div>
    <div id="table-@Model.Id"></div>
    @using(Script.Foot()) {
      <script>
          $(function () {
                var tableId = "#table-@Model.Id";
                var $hidden = $("#@Html.FieldIdFor(m => m.TableData)");

                var $table = new Tabulator(tableId, {
                    height:"300px",
                    layout:"fitColumns",
                    movableRows: true,
                    columns: @Html.Raw(columns),
                    dataEdited:function(newData){
                        var newVal = JSON.stringify(newData);
                        $hidden.val(newVal);
                    },
                  rowMoved: function (row) {
                    var newData = row.getTable().getData();
                    var rows = row.getTable().getRows();
                    for (var i=0; i < rows.length; i++){
                      newData[i] = rows[i].getData();
                    }
                    var newVal = JSON.stringify(newData);
                    $hidden.val(newVal);
                    },
                    data: @Html.Raw(Model.TableData)
                });
                $("#btnAddTop").click(function(){
                    var rows = $table.getRows();
                    if(@(settings.MaxRows) > 0 && rows.length >= @(settings.MaxRows)) {
                        alert("@T("Max number of rows reached.")");
                    }
                    else {
                        $table.addRow({}, true);
                    }
                });
                $("#btnAddBottom").click(function(){
                    var rows = $table.getRows();
                    if(@(settings.MaxRows) > 0 && rows.length >= @(settings.MaxRows)) {
                        alert("@T("Max number of rows reached.")");
                    }
                    else {
                        $table.addRow({}, false);
                    }
                });
            });
      </script>
    }
  </div>
</fieldset>